Below is one complete example of a GitOps‑ready repository structure along with sample YAML files that meet all the requirements. In this example, we use an Argo CD ApplicationSet (with a list generator that covers both the development and production clusters) and a Helm Chart that “packs” all the Kubernetes manifests (namespace, ConfigMap, Deployment, Service, Ingress, and Secret) configured per environment.
In our repository, the file layout might resemble this:
spring-boot-api/
├── argocd
│   └── application-set.yaml
└── helm
    └── spring-boot-api
        ├── Chart.yaml
        ├── values.yaml            # default values (dev)
        ├── values-dev.yaml        # overrides for the development environment
        ├── values-prd.yaml        # overrides for the production environment
        └── templates
            ├── _helpers.tpl
            ├── namespace.yaml
            ├── configmap.yaml
            ├── secret.yaml
            ├── deployment.yaml
            ├── service.yaml
            └── ingress.yaml
Below are the file contents:
Argo CD ApplicationSet (argocd/application-set.yaml)
This file sets up two applications—one for development and one for production. It uses a list generator to feed in the cluster names and environment names. Note that we specify a candidate‑chosen Argo CD project (here, “inpost‑apps”) and the destination namespace is named with the environment (for example, “spring-boot‑dev” or “spring-boot‑prd”). The ApplicationSet will automatically create the namespace if it does not exist.
apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: spring-boot-api-appset
  namespace: argocd
spec:
  generators:
    - list:
        elements:
          - cluster: dev-global-cluster-0
            environment: dev
          - cluster: prd-global-cluster-5
            environment: prd
  template:
    metadata:
      name: "{{environment}}-spring-boot-api"
    spec:
      project: inpost-apps
      source:
        repoURL: 'https://github.com/yourusername/spring-boot-api.git'
        targetRevision: HEAD
        path: helm/spring-boot-api
        helm:
          valueFiles:
            - "values-{{environment}}.yaml"
      destination:
        server: "{{cluster}}"
        namespace: spring-boot-{{environment}}
      syncPolicy:
        automated:
          prune: true
          selfHeal: true
Helm Chart Files
Chart.yaml
This file defines the chart’s metadata.
apiVersion: v2
name: spring-boot-api
description: A Helm chart for deploying Spring Boot API with a Busybox image.
type: application
version: 0.1.0
appVersion: "1.0"
values.yaml (Default – assumed as development defaults)
Here we set default values such as 3 replicas. Values unique to each environment (e.g. replica count or host in Ingress) are overridden in values-dev.yaml or values-prd.yaml.
replicaCount: 3

image:
  repository: busybox
  tag: stable
  pullPolicy: Always

env:
  profile: "dev"

resources:
  requests:
    memory: "128Mi"
    cpu: "250m"
  limits:
    memory: "256Mi"
    cpu: "500m"

livenessProbe:
  tcpSocket:
    port: 8080
  initialDelaySeconds: 15
  periodSeconds: 20

readinessProbe:
  tcpSocket:
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 10

service:
  ports:
    - name: api
      port: 8080
    - name: logs
      port: 8081
    - name: soap
      port: 8082

ingress:
  host: "dev.example.com"
  paths:
    - path: /api
      port: 8080
    - path: /logs
      port: 8081
    - path: /soap
      port: 8082
values-dev.yaml
Overrides for the development environment:
replicaCount: 3
env:
  profile: "dev"
ingress:
  host: "dev.example.com"
replicaCount: 3
env:
  profile: "dev"
ingress:
  host: "dev.example.com"
templates/_helpers.tpl
This template file contains helper functions for naming conventions (used throughout the chart).
{{- define "spring-boot-api.name" -}}
spring-boot-api
{{- end }}

{{- define "spring-boot-api.fullname" -}}
{{- printf "%s-%s" (include "spring-boot-api.name" .) .Release.Namespace | trunc 63 | trimSuffix "-" -}}
{{- end }}
templates/namespace.yaml
This manifest ensures that the target namespace exists. (When using Helm with Argo CD in “createNamespace” mode, this can help or be omitted if the cluster automatically creates it.)
apiVersion: v1
kind: Namespace
metadata:
  name: {{ .Release.Namespace }}
templates/configmap.yaml
Creates a ConfigMap containing sample JSON content. It will be mounted into the pod’s “app/” directory as config.json.
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "spring-boot-api.fullname" . }}-config
data:
  config.json: |
    {
      "setting1": "value1",
      "setting2": "value2"
    }
templates/secret.yaml
Generates a Secret with random key‑values using Helm’s randAlphaNum function.
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "spring-boot-api.fullname" . }}-secret
type: Opaque
stringData:
  secretKey: {{ randAlphaNum 16 | quote }}
  anotherSecret: {{ randAlphaNum 16 | quote }}
templates/deployment.yaml
This Deployment manifest meets several requirements:

Uses the Busybox image.

Injects a checksum annotation based on the ConfigMap.

Sets replica counts according to environment (via the overridden values file).

Uses a RollingUpdate strategy.

Specifies liveness and readiness probes on TCP port 8080.

Adds an environment variable (POD_IP) that dynamically gathers the pod’s IP.

Uses the proper startup argument for Spring profiles.

Includes a pre‑stop lifecycle hook that executes the shutdown command.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "spring-boot-api.fullname" . }}
  annotations:
    checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "spring-boot-api.name" . }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: {{ include "spring-boot-api.name" . }}
    spec:
      containers:
        - name: {{ include "spring-boot-api.name" . }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8080
            - containerPort: 8081
            - containerPort: 8082
          args:
            - "--spring.profiles.active={{ .Values.env.profile }}"
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "wget http://localhost:8080/service/shutdown"]
          resources:
            requests:
              cpu: "{{ .Values.resources.requests.cpu }}"
              memory: "{{ .Values.resources.requests.memory }}"
            limits:
              cpu: "{{ .Values.resources.limits.cpu }}"
              memory: "{{ .Values.resources.limits.memory }}"
          livenessProbe:
            tcpSocket:
              port: {{ .Values.livenessProbe.tcpSocket.port }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.readinessProbe.tcpSocket.port }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
      volumes:
        - name: config-volume
          configMap:
            name: {{ include "spring-boot-api.fullname" . }}-config
templates/service.yaml
This Service exposes the three container ports (8080, 8081, 8082) as ClusterIP with the same target ports.
apiVersion: v1
kind: Service
metadata:
  name: {{ include "spring-boot-api.fullname" . }}-svc
spec:
  type: ClusterIP
  selector:
    app: {{ include "spring-boot-api.name" . }}
  ports:
    - name: api
      port: 8080
      targetPort: 8080
    - name: logs
      port: 8081
      targetPort: 8081
    - name: soap
      port: 8082
      targetPort: 8082
templates/ingress.yaml
This Ingress exposes one host per environment (set in the values files) with three paths that map to the different service ports.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "spring-boot-api.fullname" . }}-ingress
spec:
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: {{ include "spring-boot-api.fullname" . }}-svc
                port:
                  number: 8080
          - path: /logs
            pathType: Prefix
            backend:
              service:
                name: {{ include "spring-boot-api.fullname" . }}-svc
                port:
                  number: 8081
          - path: /soap
            pathType: Prefix
            backend:
              service:
                name: {{ include "spring-boot-api.fullname" . }}-svc
                port:
                  number: 8082
Additional Considerations
Dynamic Checksum Annotation: The deployment injects a checksum annotation based on the rendered ConfigMap so that updates to configuration automatically trigger a pod restart.
Secrets & Random Values: The Secret manifest uses Helm’s random generator functions to create unpredictable key‑values.
Environment Overrides: The use of dedicated environment files (values-dev.yaml and values-prd.yaml) ensures that settings like replica count, Spring profile, and Ingress host are swapped easily during deployment.
GitOps Integration: With the Argo CD ApplicationSet file, the repository is ready for a GitOps workflow—with environment‑specific values and automatic namespace creation considered.
This setup not only aligns with the requirements outlined in the assessment but is also structured so you (or a hiring team) can easily extend it—for example, by adding further customizations in additional environments or additional templates for other resources.
